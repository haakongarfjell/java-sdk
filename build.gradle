import java.net.URL
import org.hidetake.gradle.swagger.generator.GenerateSwaggerCode;
import java.nio.file.Files
import java.nio.file.Path
import java.util.regex.Pattern
import java.util.regex.Matcher

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'io.freefair.lombok' version '8.0.0-rc2'
    id 'com.diffplug.spotless' version '6.18.0'
    id 'com.jaredsburrows.license' version '0.9.0'
}

group = GROUP
version = VERSION_NAME
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation (platform('com.squareup.okhttp3:okhttp-bom:4.10.0'))
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'io.swagger:swagger-annotations:1.6.9'
    implementation 'org.json:json:20230227'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.openapitools:openapi-generator-gradle-plugin:6.4.0'
    swaggerCodegen 'org.openapitools:openapi-generator-cli:6.4.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-orgjson:0.11.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'


    implementation 'commons-beanutils:commons-beanutils:1.9.2'
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "CLIENT_ID", System.getenv("CLIENT_ID")
    systemProperty "CLIENT_SECRET", System.getenv("CLIENT_SECRET")
    systemProperty "MERCHANT_SERIAL_NUMBER", System.getenv("MERCHANT_SERIAL_NUMBER")
    systemProperty "SUBSCRIPTION_KEY", System.getenv("SUBSCRIPTION_KEY")
}

spotless {
    java {
        googleJavaFormat("1.13.0")
        removeUnusedImports()
    }
}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = true
    generateJsonReport = false
    generateTextReport = false
}

swaggerSources {
    create("checkout").with {
        def apiName = name
        def url = new URL("https://vippsas.github.io/vipps-developer-docs/redocusaurus/${apiName}-swagger-id.yaml")
        def yamlString = url.text
        def yamlFile = new File("./api-specs/${apiName}-swagger-id.yaml")
        yamlFile.parentFile.mkdirs()
        yamlFile.createNewFile()
        yamlFile.text = yamlString
        setInputFile(yamlFile)
        code {
            language = "java"
            configFile = file("./config/swagger/${apiName}.json")
            library = "jersey3"
        }
    }
    create("epayment").with {
        def apiName = name
        def url = new URL("https://vippsas.github.io/vipps-developer-docs/redocusaurus/${apiName}-swagger-id.yaml")
        def yamlString = url.text
        def yamlFile = new File("./api-specs/${apiName}-swagger-id.yaml")
        yamlFile.parentFile.mkdirs()
        yamlFile.createNewFile()
        yamlFile.text = yamlString
        setInputFile(yamlFile)
        code {
            language = "java"
            configFile = file("./config/swagger/${apiName}.json")
            library = "jersey3"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/vippsas/java-sdk")
            credentials {
                username = System.getenv("PUBLISH_USERNAME")
                password = System.getenv("PUBLISH_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
